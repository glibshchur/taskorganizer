{"version":3,"sources":["logo.svg","firebase.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","provider","auth","GoogleAuthProvider","App","state","currentItem","username","items","user","performer","description","handleChange","bind","handleSubmit","login","logout","e","this","setState","target","name","value","signOut","then","signInWithPopup","result","preventDefault","itemsRef","database","ref","item","title","displayName","email","push","onAuthStateChanged","on","snapshot","val","newState","id","itemId","remove","className","onClick","src","photoURL","onSubmit","type","placeholder","onChange","map","key","removeItem","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4679b45e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import firebase from 'firebase'\n\nconst config = {\n    apiKey: \"AIzaSyAgh6oJsQpqk_IwUUORcOBgf6JzymNC9I0\",\n    authDomain: \"organizer-2838a.firebaseapp.com\",\n    databaseURL: \"https://organizer-2838a.firebaseio.com\",\n    projectId: \"organizer-2838a\",\n    storageBucket: \"organizer-2838a.appspot.com\",\n    messagingSenderId: \"5471664420\",\n};\n\nfirebase.initializeApp(config);\n\nexport const provider = new firebase.auth.GoogleAuthProvider();\nexport const auth = firebase.auth();\n\nexport default firebase;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport firebase, { auth, provider } from './firebase.js';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      currentItem: '',\n      username: '',\n      items: [],\n      user : null,\n      performer : null,\n      description : '',\n    }\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n\n    this.login = this.login.bind(this);\n    this.logout = this.logout.bind(this);\n  }\n\n  handleChange(e) {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  }\n\n  logout() {\n    auth.signOut()\n    .then(() => {\n      this.setState({\n        user: null\n      });\n    });\n  }\n\n  login() {\n    auth.signInWithPopup(provider) \n      .then((result) => {\n        const user = result.user;\n        this.setState({\n          user\n        });\n      });\n    }\n  \n  handleSubmit(e) {\n    e.preventDefault();\n    const itemsRef = firebase.database().ref('items');\n    const item = {\n      title: this.state.currentItem,\n      description: this.state.description,\n      performer: this.state.performer,\n      user: this.state.user.displayName || this.state.user.email\n    }\n    itemsRef.push(item);\n    this.setState({\n      currentItem: '',\n      description: '',\n      performer: '',\n      username: ''\n    });\n  }\n\n  componentDidMount() {\n    auth.onAuthStateChanged((user) => {\n      if (user) {\n        this.setState({ user });\n      } \n    });\n\n    const itemsRef = firebase.database().ref('items');\n\n    itemsRef.on('value', (snapshot) => {\n      let items = snapshot.val();\n      let newState = [];\n      for (let item in items) {\n        newState.push({\n          id: item,\n          title: items[item].title,\n          description: items[item].description,\n          performer: items[item].performer,\n          user: items[item].user\n        });\n      }\n      this.setState({\n        items: newState\n      });\n    });\n  }\n\n  removeItem(itemId) {\n    const itemRef = firebase.database().ref(`/items/${itemId}`);\n    itemRef.remove();\n  }\n\n  render() {\n    return ( \n      <div className='app'>\n        <header>\n          <div className=\"wrapper\">\n            <h1>Task Organizer</h1>\n            {this.state.user ?\n              <button onClick={this.logout}>Logout</button>                \n              :\n              <button onClick={this.login}>Log In</button>              \n            }\n          </div>\n        </header>\n        {this.state.user ?\n          <div>\n            <div className='user-profile'>\n              <img src={this.state.user.photoURL} />\n            </div>\n            <div className='container'>\n              <section className='add-item'>\n                <form onSubmit={this.handleSubmit}>\n                  <input type=\"text\" name=\"currentItem\" placeholder=\"Task Name\" onChange={this.handleChange} value={this.state.currentItem} />\n                  <input type=\"text\" name=\"description\" placeholder=\"Task Description\" onChange={this.handleChange} value={this.state.description} />\n                  <input type=\"text\" name=\"performer\" placeholder=\"Performer\" onChange={this.handleChange} value={this.state.performer} />\n                  <button>Add Item</button>\n                </form>\n              </section>\n              <section className='display-item'>\n                <div className=\"wrapper\">\n                  <ul>\n                    {this.state.items.map((item) => {\n                      return (\n                        <li key={item.id}>\n                          <h3>{item.title}</h3>\n                          <p>Task Description: {item.description}</p>\n                          <p>Task for: {item.performer}</p>\n                          <p>Added by: {item.user}\n                            {item.user === this.state.user.displayName || item.user === this.state.user.email || item.user === this.state.performer ?\n                              <button onClick={() => this.removeItem(item.id)}>Remove Item</button> : null}\n                          </p>\n                        </li>\n                      )\n                    })}\n                  </ul>\n                </div>\n              </section>\n            </div>\n          </div>\n          :\n          <div className='wrapper'>\n            <p>You must be logged in to see the potluck list and submit to it.</p>\n          </div>\n        }\n      </div>\n\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}